package hu.akusius.palenque.anigifmaker.ui;

import hu.akusius.palenque.anigifmaker.*;
import hu.akusius.palenque.anigifmaker.util.IoUtils;
import hu.akusius.palenque.anigifmaker.util.UIUtils;
import java.awt.Color;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author Bujdosó Ákos
 */
public class MainDialog extends javax.swing.JDialog {

  private FrameGenerator fg;

  /** Creates new form MainDialog
   * @param parent
   * @param modal
   */
  public MainDialog(java.awt.Frame parent, boolean modal) {
    super(parent, modal);
    initComponents();

    setSpinnerModelFromParamRange(spQuality, GifParams.QUALITY_RANGE, 1);
    spQuality.setEnabled(false);
    chkRepeat.setSelected(GifParams.REPEAT_RANGE.getDef());
    chkEmbedParams.setSelected(GifParams.EMBED_PARAMS_RANGE.getDef());

    this.setLocationRelativeTo(null);

    pnlParams.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        paramsChanged();
      }
    });

    tfDest.getDocument().addDocumentListener(new DocumentListener() {
      private void changed() {
        refreshButtonStates();
      }

      @Override
      public void insertUpdate(DocumentEvent e) {
        changed();
      }

      @Override
      public void removeUpdate(DocumentEvent e) {
        changed();
      }

      @Override
      public void changedUpdate(DocumentEvent e) {
        changed();
      }
    });

    paramsChanged();
  }

  private static <T extends Number & Comparable<T>> void setSpinnerModelFromParamRange(JSpinner spinner, ParamRange<T> range, T step) {
    SpinnerNumberModel model = new SpinnerNumberModel(range.getDef(), range.getMin(), range.getMax(), step);
    spinner.setModel(model);
  }

  private void paramsChanged() {
    try {
      AnimParams params = pnlParams.toParams();
      fg = new FrameGenerator(params);

      lblInfo.setForeground(null);
      lblInfo.setText(String.format("Number of frames: %d. Length: %.2f seconds.", fg.getNumberOfFrames(), fg.getLengthInSeconds()));

      int firstNonFadedFrame = fg.getFirstNonFadedFrame();
      fpFirstFrame.drawFrame(fg, firstNonFadedFrame);

      int lastNonFadedFrame = fg.getLastNonFadedFrame();
      fpLastFrame.drawFrame(fg, lastNonFadedFrame);
    } catch (Exception ex) {
      fg = null;
      lblInfo.setForeground(Color.RED);
      lblInfo.setText("Invalid parameters!");
      fpFirstFrame.clearFrame();
      fpLastFrame.clearFrame();
    }

    refreshButtonStates();
  }

  private void refreshButtonStates() {
    btnPreview.setEnabled(fg != null);
    btnGenerate.setEnabled(fg != null && tfDest.getText().length() > 0);
  }

  private GifParams toGifParams() {
    return new GifParams((int) spQuality.getValue(), chkRepeat.isSelected(), chkEmbedParams.isSelected());
  }

  private void fromGifParams(GifParams gp) {
    spQuality.setValue(gp.getQuality());
    chkRepeat.setSelected(gp.isRepeat());
    chkEmbedParams.setSelected(gp.isEmbedParams());
  }

  private GenerateParams toParams() {
    return new GenerateParams(pnlParams.toParams(), toGifParams());
  }

  private void fromParams(GenerateParams params) {
    pnlParams.fromParams(params.getAnimParams());
    fromGifParams(params.getGifParams());
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    btnClose = new javax.swing.JButton();
    pnlParams = new hu.akusius.palenque.anigifmaker.ui.ParamsPanel();
    jPanel1 = new javax.swing.JPanel();
    lblInfo = new javax.swing.JLabel();
    jPanel2 = new javax.swing.JPanel();
    fpFirstFrame = new hu.akusius.palenque.anigifmaker.ui.FramePanel();
    fpLastFrame = new hu.akusius.palenque.anigifmaker.ui.FramePanel();
    jPanel3 = new javax.swing.JPanel();
    tfDest = new javax.swing.JTextField();
    btnSelectDest = new javax.swing.JButton();
    spQuality = new javax.swing.JSpinner();
    chkRepeat = new javax.swing.JCheckBox();
    chkEmbedParams = new javax.swing.JCheckBox();
    btnGenerate = new javax.swing.JButton();
    btnPreview = new javax.swing.JButton();
    btnExport = new javax.swing.JButton();
    btnImport = new javax.swing.JButton();
    chkRestore = new javax.swing.JCheckBox();
    btnOpen = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("The Palenque Code – Animated GIF Maker");
    setResizable(false);

    btnClose.setText("Close");
    btnClose.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnCloseActionPerformed(evt);
      }
    });

    pnlParams.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Parameters", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

    jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Info", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

    lblInfo.setText("This is an information text.");

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(lblInfo)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(lblInfo)
        .addGap(6, 6, 6))
    );

    jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "First and last (complete) frame", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

    fpFirstFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

    javax.swing.GroupLayout fpFirstFrameLayout = new javax.swing.GroupLayout(fpFirstFrame);
    fpFirstFrame.setLayout(fpFirstFrameLayout);
    fpFirstFrameLayout.setHorizontalGroup(
      fpFirstFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 246, Short.MAX_VALUE)
    );
    fpFirstFrameLayout.setVerticalGroup(
      fpFirstFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 0, Short.MAX_VALUE)
    );

    fpLastFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

    javax.swing.GroupLayout fpLastFrameLayout = new javax.swing.GroupLayout(fpLastFrame);
    fpLastFrame.setLayout(fpLastFrameLayout);
    fpLastFrameLayout.setHorizontalGroup(
      fpLastFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 246, Short.MAX_VALUE)
    );
    fpLastFrameLayout.setVerticalGroup(
      fpLastFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 240, Short.MAX_VALUE)
    );

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(fpFirstFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(fpLastFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap())
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
        .addGap(2, 2, 2)
        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(fpLastFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(fpFirstFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        .addContainerGap())
    );

    jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Destination file", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP));

    btnSelectDest.setText("…");
    btnSelectDest.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSelectDestActionPerformed(evt);
      }
    });

    spQuality.setFont(spQuality.getFont().deriveFont(spQuality.getFont().getSize()-1f));
    spQuality.setModel(new javax.swing.SpinnerNumberModel(10, 1, 20, 1));
    spQuality.setToolTipText("Quality (currently not used)");

    chkRepeat.setFont(chkRepeat.getFont().deriveFont(chkRepeat.getFont().getSize()-1f));
    chkRepeat.setSelected(true);
    chkRepeat.setText("Repeat");

    chkEmbedParams.setFont(chkEmbedParams.getFont().deriveFont(chkEmbedParams.getFont().getSize()-1f));
    chkEmbedParams.setSelected(true);
    chkEmbedParams.setText("Embd.pars.");
    chkEmbedParams.setToolTipText("Embed parameters");

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addComponent(tfDest)
        .addGap(2, 2, 2)
        .addComponent(btnSelectDest, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(spQuality, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(chkRepeat)
        .addGap(2, 2, 2)
        .addComponent(chkEmbedParams)
        .addGap(2, 2, 2))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
          .addComponent(tfDest)
          .addComponent(btnSelectDest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          .addComponent(spQuality)
          .addComponent(chkRepeat)
          .addComponent(chkEmbedParams))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    btnGenerate.setMnemonic('G');
    btnGenerate.setText("Generate");
    btnGenerate.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnGenerateActionPerformed(evt);
      }
    });

    btnPreview.setMnemonic('P');
    btnPreview.setText("Preview");
    btnPreview.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnPreviewActionPerformed(evt);
      }
    });

    btnExport.setFont(btnExport.getFont().deriveFont(btnExport.getFont().getSize()-1f));
    btnExport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/akusius/palenque/anigifmaker/ui/icons/export.png"))); // NOI18N
    btnExport.setMnemonic('E');
    btnExport.setToolTipText("Export");
    btnExport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnExportActionPerformed(evt);
      }
    });

    btnImport.setFont(btnImport.getFont().deriveFont(btnImport.getFont().getSize()-1f));
    btnImport.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/akusius/palenque/anigifmaker/ui/icons/import.png"))); // NOI18N
    btnImport.setMnemonic('I');
    btnImport.setToolTipText("Import");
    btnImport.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnImportActionPerformed(evt);
      }
    });

    chkRestore.setFont(chkRestore.getFont().deriveFont(chkRestore.getFont().getSize()-1f));
    chkRestore.setText("State restore");
    chkRestore.setToolTipText("Restore last state at startup");

    btnOpen.setFont(btnOpen.getFont().deriveFont(btnOpen.getFont().getSize()-1f));
    btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/akusius/palenque/anigifmaker/ui/icons/load.png"))); // NOI18N
    btnOpen.setMnemonic('O');
    btnOpen.setToolTipText("Open GIF");
    btnOpen.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnOpenActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(btnImport)
        .addGap(2, 2, 2)
        .addComponent(btnOpen)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(chkRestore)
        .addGap(18, 18, Short.MAX_VALUE)
        .addComponent(btnPreview)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnGenerate)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(btnClose)
        .addContainerGap())
      .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
      .addComponent(pnlParams, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addComponent(pnlParams, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addGap(2, 2, 2)
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
            .addComponent(btnClose)
            .addComponent(btnGenerate)
            .addComponent(btnPreview)
            .addComponent(chkRestore))
          .addComponent(btnExport)
          .addComponent(btnImport)
          .addComponent(btnOpen))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
    this.dispose();
  }//GEN-LAST:event_btnCloseActionPerformed

  private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
    if (fg == null) {
      return;
    }

    File destFile = new File(tfDest.getText());
    if (destFile.exists()) {
      int result = JOptionPane.showConfirmDialog(this, "Destination file already exists. Overwrite?", "Existing destination", JOptionPane.YES_NO_OPTION);
      if (result != JOptionPane.YES_OPTION) {
        return;
      }
    }

    GenerateDialog.generate(this, toParams(), destFile);
  }//GEN-LAST:event_btnGenerateActionPerformed

  private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed
    if (fg == null) {
      return;
    }

    PreviewDialog.preview(this, fg);
  }//GEN-LAST:event_btnPreviewActionPerformed

  private static final String EXTENSION = "pqg";

  private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
    try {
      TextImpexerDialog.exportText(UIUtils.windowForComponent(this), toParams().serialize(), EXTENSION);
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);
    }
  }//GEN-LAST:event_btnExportActionPerformed

  private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
    try {
      String s = TextImpexerDialog.importText(UIUtils.windowForComponent(this), EXTENSION);
      if (s != null) {
        fromParams(GenerateParams.deserialize(s));
      }
    } catch (Exception ex) {
      JOptionPane.showMessageDialog(this, "Invalid format!", "Error", JOptionPane.WARNING_MESSAGE);
    }
  }//GEN-LAST:event_btnImportActionPerformed

  private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
    FileChooser fileChooser = new FileChooser("gif");

    if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fileChooser.getSelectedFile();

      try {
        List<String> deserializable = new ArrayList<>(5);
        for (String comment : GifCommentCollector.collectComments(selectedFile.toPath())) {
          if (GenerateParams.isSerializedBinaryASCII(comment)) {
            deserializable.add(comment);
          }
        }
        if (deserializable.isEmpty()) {
          JOptionPane.showMessageDialog(this, "Embedded parameters not found.",
                  "Info", JOptionPane.INFORMATION_MESSAGE);
        } else {
          String source = deserializable.get(0);
          if (deserializable.size() > 1) {
            JSpinner spinner = new JSpinner(new SpinnerNumberModel(1, 1, deserializable.size(), 1));
            JOptionPane.showMessageDialog(this, spinner, "Which embedded GIF to open?", JOptionPane.QUESTION_MESSAGE);
            source = deserializable.get((int) spinner.getValue() - 1);
          }
          GenerateParams params = GenerateParams.deserializeBinaryASCIIOptional(source);
          fromParams(params);
          tfDest.setText(selectedFile.getAbsolutePath());
        }
      } catch (Exception ex) {
        JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);
      }
    }
  }//GEN-LAST:event_btnOpenActionPerformed

  private void btnSelectDestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectDestActionPerformed
    FileChooser fileChooser = new FileChooser("gif");

    String currentPath = tfDest.getText();
    if (currentPath != null && !currentPath.isEmpty()) {
      File currentFile = new File(currentPath);
      fileChooser.setSelectedFile(currentFile.getAbsoluteFile());
    }

    if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fileChooser.getSelectedFile();
      tfDest.setText(selectedFile.getAbsolutePath());
    }
  }//GEN-LAST:event_btnSelectDestActionPerformed

  private static final Path stateFile = Paths.get("state." + EXTENSION);

  private static final String ENCODING = "UTF-8";

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    UIUtils.setLookAndFeel();

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        final MainDialog dialog = new MainDialog(new javax.swing.JFrame(), true);
        if (Files.exists(stateFile)) {
          try (InputStream is = Files.newInputStream(stateFile)) {
            String s = IoUtils.readStringFromInputStream(is, ENCODING);
            dialog.fromParams(GenerateParams.deserialize(s));
            dialog.chkRestore.setSelected(true);
          } catch (Exception e) {
            JOptionPane.showMessageDialog(dialog, "Last state could not be restored!",
                    "Error", JOptionPane.WARNING_MESSAGE);
          }
        }
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosed(java.awt.event.WindowEvent e) {
            if (dialog.chkRestore.isSelected()) {
              try {
                Path tmp = Files.createTempFile("pqgst", null);
                try (OutputStream os = Files.newOutputStream(tmp);
                        BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(os, ENCODING))) {
                  writer.write(dialog.toParams().serialize());
                }
                Files.move(tmp, stateFile, StandardCopyOption.REPLACE_EXISTING);
              } catch (Exception ex) {
                JOptionPane.showMessageDialog(dialog, ex.toString(), "Error saving state", JOptionPane.WARNING_MESSAGE);
              }
            } else {
              try {
                Files.deleteIfExists(stateFile);
              } catch (Exception ex) {
                // Nem foglalkozunk vele
              }
            }
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton btnClose;
  private javax.swing.JButton btnExport;
  private javax.swing.JButton btnGenerate;
  private javax.swing.JButton btnImport;
  private javax.swing.JButton btnOpen;
  private javax.swing.JButton btnPreview;
  private javax.swing.JButton btnSelectDest;
  private javax.swing.JCheckBox chkEmbedParams;
  private javax.swing.JCheckBox chkRepeat;
  private javax.swing.JCheckBox chkRestore;
  private hu.akusius.palenque.anigifmaker.ui.FramePanel fpFirstFrame;
  private hu.akusius.palenque.anigifmaker.ui.FramePanel fpLastFrame;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JLabel lblInfo;
  private hu.akusius.palenque.anigifmaker.ui.ParamsPanel pnlParams;
  private javax.swing.JSpinner spQuality;
  private javax.swing.JTextField tfDest;
  // End of variables declaration//GEN-END:variables
}
