package hu.akusius.palenque.anigifmaker.ui;

import hu.akusius.palenque.anigifmaker.AnimParams;
import hu.akusius.palenque.anigifmaker.FrameGenerator;
import hu.akusius.palenque.anigifmaker.FrameInfo;
import hu.akusius.palenque.anigifmaker.util.UIUtils;
import java.awt.Dimension;
import java.awt.Window;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.other.ChangeSupport;

/**
 *
 * @author Bujdosó Ákos
 */
public class PreviewDialog extends javax.swing.JDialog {

  private final FrameGenerator fg;

  private final FrameModel model;

  private final Timer playerTimer;

  private boolean playing = false;

  private static final int FRAME_PANEL_MAX_SIZE = 600;

  /** Creates new form PreviewDialog
   * @param parent
   * @param fg
   */
  @SuppressWarnings("LeakingThisInConstructor")
  private PreviewDialog(Window parent, FrameGenerator fg) {
    super(parent, ModalityType.APPLICATION_MODAL);
    this.fg = fg;
    this.model = new FrameModel(fg);

    initComponents();

    fpFrame.setDrawFrameNum(false);

    spFrame.setModel(model.getSpm());
    slFrame.setModel(model.getBrm());

    AnimParams ap = fg.getAnimParams();
    int width = ap.getWidth();
    int height = ap.getHeight();
    if (width > FRAME_PANEL_MAX_SIZE) {
      double ratio = (double) width / FRAME_PANEL_MAX_SIZE;
      width = (int) (width / ratio);
      height = (int) (height / ratio);
    }
    if (height > FRAME_PANEL_MAX_SIZE) {
      double ratio = (double) height / FRAME_PANEL_MAX_SIZE;
      width = (int) (width / ratio);
      height = (int) (height / ratio);
    }
    fpFrame.setPreferredSize(new Dimension(width, height));
    this.pack();

    this.setLocationRelativeTo(parent);
    UIUtils.installDialogEscapeCloseOperation(this);

    model.addChangeListener(new ChangeListener() {
      @Override
      public void stateChanged(ChangeEvent e) {
        currentFrameChanged();
      }
    });

    currentFrameChanged();

    playerTimer = new Timer(1000 / fg.getAnimParams().getFramesPerSecond(), new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        model.toNextFrame();
      }
    });
    btnPlay.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent e) {
        setPlaying(e.getStateChange() == ItemEvent.SELECTED);
      }
    });

    chkLoop.addItemListener(new ItemListener() {
      @Override
      public void itemStateChanged(ItemEvent e) {
        model.setLooping(e.getStateChange() == ItemEvent.SELECTED);
      }
    });
    chkLoop.setSelected(true);

    this.addWindowListener(new WindowAdapter() {
      @Override
      public void windowClosed(WindowEvent e) {
        playerTimer.stop();
      }
    });

    setPlaying(false);
  }

  private void currentFrameChanged() {
    FrameInfo fi = model.getCurrentFrameInfo();
    fpFrame.drawFrame(fg, fi.getFrameNum());

    tfSeconds.setText(String.format("%.2f", fi.getSeconds()));
    tfStepNum.setText(Integer.toString(fi.getStepNum()));
    tfPercent.setText(String.format("%.2f", fi.getPercent()));
    tfAnimTime.setText(String.format("%.2f", fi.getAnimTime()));
    tfOpacity.setText(String.format("%.2f", fi.getOpacity()));
    chkFaded.setSelected(fi.isFaded());
    chkHeld.setSelected(fi.isHeld());

    if (!model.hasNextFrame()) {
      setPlaying(false);
    }
  }

  private void setPlaying(boolean newPlaying) {
    if (playing == newPlaying) {
      return;
    }

    playing = newPlaying;

    if (playing) {
      if (!model.hasNextFrame()) {
        model.setCurrentFrame(0);
      }
      playerTimer.start();
    } else {
      playerTimer.stop();
    }

    btnPlay.setSelected(playing);
    btnSnapshot.setEnabled(!playing);
  }

  /**
   * Az előnézet megjelenítése.
   * @param parent
   * @param fg
   */
  public static void preview(Window parent, FrameGenerator fg) {
    PreviewDialog dlg = new PreviewDialog(parent, fg);
    dlg.setVisible(true);
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    pnlFrameWrapper = new javax.swing.JPanel();
    fpFrame = new hu.akusius.palenque.anigifmaker.ui.FramePanel();
    pnlControlWrapper = new javax.swing.JPanel();
    pnlControl = new javax.swing.JPanel();
    btnPlay = new javax.swing.JToggleButton();
    spFrame = new javax.swing.JSpinner();
    slFrame = new javax.swing.JSlider();
    jLabel1 = new javax.swing.JLabel();
    tfSeconds = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    jLabel4 = new javax.swing.JLabel();
    tfPercent = new javax.swing.JTextField();
    tfStepNum = new javax.swing.JTextField();
    jLabel5 = new javax.swing.JLabel();
    tfAnimTime = new javax.swing.JTextField();
    jLabel6 = new javax.swing.JLabel();
    tfOpacity = new javax.swing.JTextField();
    btnSnapshot = new javax.swing.JButton();
    chkFaded = new hu.akusius.palenque.anigifmaker.ui.ReadOnlyCheckBox();
    chkHeld = new hu.akusius.palenque.anigifmaker.ui.ReadOnlyCheckBox();
    chkLoop = new javax.swing.JCheckBox();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("Preview");
    setResizable(false);

    fpFrame.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
    fpFrame.setPreferredSize(new java.awt.Dimension(200, 200));

    javax.swing.GroupLayout fpFrameLayout = new javax.swing.GroupLayout(fpFrame);
    fpFrame.setLayout(fpFrameLayout);
    fpFrameLayout.setHorizontalGroup(
      fpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 196, Short.MAX_VALUE)
    );
    fpFrameLayout.setVerticalGroup(
      fpFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 196, Short.MAX_VALUE)
    );

    pnlFrameWrapper.add(fpFrame);

    getContentPane().add(pnlFrameWrapper, java.awt.BorderLayout.CENTER);

    btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/akusius/palenque/anigifmaker/ui/icons/playing.png"))); // NOI18N

    spFrame.setFont(spFrame.getFont().deriveFont(spFrame.getFont().getSize()-1f));

    jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getSize()-1f));
    jLabel1.setText("Seconds:");

    tfSeconds.setEditable(false);
    tfSeconds.setFont(tfSeconds.getFont().deriveFont(tfSeconds.getFont().getSize()-1f));
    tfSeconds.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    jLabel3.setFont(jLabel3.getFont().deriveFont(jLabel3.getFont().getSize()-1f));
    jLabel3.setText("Step:");

    jLabel4.setFont(jLabel4.getFont().deriveFont(jLabel4.getFont().getSize()-1f));
    jLabel4.setText("Percent:");

    tfPercent.setEditable(false);
    tfPercent.setFont(tfPercent.getFont().deriveFont(tfPercent.getFont().getSize()-1f));
    tfPercent.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    tfStepNum.setEditable(false);
    tfStepNum.setFont(tfStepNum.getFont().deriveFont(tfStepNum.getFont().getSize()-1f));
    tfStepNum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    jLabel5.setFont(jLabel5.getFont().deriveFont(jLabel5.getFont().getSize()-1f));
    jLabel5.setText("Animation time:");

    tfAnimTime.setEditable(false);
    tfAnimTime.setFont(tfAnimTime.getFont().deriveFont(tfAnimTime.getFont().getSize()-1f));
    tfAnimTime.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    jLabel6.setFont(jLabel6.getFont().deriveFont(jLabel6.getFont().getSize()-1f));
    jLabel6.setText("Opacity:");

    tfOpacity.setEditable(false);
    tfOpacity.setFont(tfOpacity.getFont().deriveFont(tfOpacity.getFont().getSize()-1f));
    tfOpacity.setHorizontalAlignment(javax.swing.JTextField.RIGHT);

    btnSnapshot.setIcon(new javax.swing.ImageIcon(getClass().getResource("/hu/akusius/palenque/anigifmaker/ui/icons/picture_save.png"))); // NOI18N
    btnSnapshot.setToolTipText("Save picture…");
    btnSnapshot.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        btnSnapshotActionPerformed(evt);
      }
    });

    chkFaded.setText("Fade");
    chkFaded.setFont(chkFaded.getFont().deriveFont(chkFaded.getFont().getSize()-1f));

    chkHeld.setText("Hold");
    chkHeld.setFont(chkHeld.getFont().deriveFont(chkHeld.getFont().getSize()-1f));

    chkLoop.setFont(chkLoop.getFont().deriveFont(chkLoop.getFont().getSize()-1f));
    chkLoop.setToolTipText("Auto restart");

    javax.swing.GroupLayout pnlControlLayout = new javax.swing.GroupLayout(pnlControl);
    pnlControl.setLayout(pnlControlLayout);
    pnlControlLayout.setHorizontalGroup(
      pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnlControlLayout.createSequentialGroup()
        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(pnlControlLayout.createSequentialGroup()
            .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(btnSnapshot, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(spFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(slFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(chkLoop))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlControlLayout.createSequentialGroup()
            .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jLabel4)
              .addComponent(jLabel3)
              .addComponent(jLabel1))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(tfSeconds)
              .addComponent(tfStepNum, javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(tfPercent, javax.swing.GroupLayout.Alignment.TRAILING))
            .addGap(18, 18, 18)
            .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(chkFaded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
              .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
              .addComponent(chkHeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(tfAnimTime, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
              .addComponent(tfOpacity))))
        .addGap(6, 6, 6))
    );
    pnlControlLayout.setVerticalGroup(
      pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(pnlControlLayout.createSequentialGroup()
        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(btnPlay, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(btnSnapshot)
          .addComponent(spFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(slFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(chkLoop))
        .addGap(4, 4, 4)
        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(tfSeconds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5)
          .addComponent(tfAnimTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0)
        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(tfStepNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel6)
          .addComponent(tfOpacity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, 0)
        .addGroup(pnlControlLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(tfPercent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel4)
          .addComponent(chkFaded, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(chkHeld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(0, 0, Short.MAX_VALUE))
    );

    pnlControlWrapper.add(pnlControl);

    getContentPane().add(pnlControlWrapper, java.awt.BorderLayout.SOUTH);

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private FileChooser fileChooser;

  private void btnSnapshotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSnapshotActionPerformed
    if (playing) {
      return;
    }

    if (fileChooser == null) {
      fileChooser = new FileChooser("png");
    }

    if (fileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
      File selectedFile = fileChooser.getSelectedFile();
      BufferedImage frameImage = fg.generateFrame(model.getCurrentFrame());

      try {
        boolean writeResult = ImageIO.write(frameImage, "png", selectedFile);
        if (writeResult != true) {
          JOptionPane.showMessageDialog(this, "Error occured during saving the picture!", "Error", JOptionPane.WARNING_MESSAGE);
        }
      } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.toString(), "Error", JOptionPane.WARNING_MESSAGE);
      }
    }
  }//GEN-LAST:event_btnSnapshotActionPerformed

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JToggleButton btnPlay;
  private javax.swing.JButton btnSnapshot;
  private hu.akusius.palenque.anigifmaker.ui.ReadOnlyCheckBox chkFaded;
  private hu.akusius.palenque.anigifmaker.ui.ReadOnlyCheckBox chkHeld;
  private javax.swing.JCheckBox chkLoop;
  private hu.akusius.palenque.anigifmaker.ui.FramePanel fpFrame;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JLabel jLabel6;
  private javax.swing.JPanel pnlControl;
  private javax.swing.JPanel pnlControlWrapper;
  private javax.swing.JPanel pnlFrameWrapper;
  private javax.swing.JSlider slFrame;
  private javax.swing.JSpinner spFrame;
  private javax.swing.JTextField tfAnimTime;
  private javax.swing.JTextField tfOpacity;
  private javax.swing.JTextField tfPercent;
  private javax.swing.JTextField tfSeconds;
  private javax.swing.JTextField tfStepNum;
  // End of variables declaration//GEN-END:variables

  private static class FrameModel {

    private final FrameGenerator fg;

    private final int lastFrame;

    private final BoundedRangeModel brm;

    private final SpinnerModel spm;

    private boolean looping;

    private int currentFrame;

    FrameModel(FrameGenerator fg) {
      assert fg != null;
      this.fg = fg;

      lastFrame = fg.getNumberOfFrames() - 1;
      brm = new DefaultBoundedRangeModel(0, 0, 0, lastFrame);
      spm = new SpinnerNumberModel(0, 0, lastFrame, 1);

      brm.addChangeListener(new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent e) {
          setCurrentFrame(brm.getValue());
        }
      });

      spm.addChangeListener(new ChangeListener() {
        @Override
        public void stateChanged(ChangeEvent e) {
          setCurrentFrame((int) spm.getValue());
        }
      });
    }

    public int getCurrentFrame() {
      return currentFrame;
    }

    /**
     *
     * @param newCurrentFrame
     * @return {@code true}, ha történt változtatás (volt újabb kocka).
     */
    private boolean setCurrentFrame(int newCurrentFrame) {
      if (currentFrame == newCurrentFrame || newCurrentFrame > lastFrame || newCurrentFrame < 0) {
        return false;
      }
      currentFrame = newCurrentFrame;
      brm.setValue(currentFrame);
      spm.setValue(currentFrame);
      changeSupport.fireChange();
      return true;
    }

    public FrameInfo getCurrentFrameInfo() {
      return fg.getFrameInfo(currentFrame);
    }

    public boolean isLooping() {
      return looping;
    }

    public void setLooping(boolean looping) {
      this.looping = looping;
    }

    /**
     * @return {@code true}, ha van következő képkocka.
     */
    public boolean hasNextFrame() {
      return currentFrame < lastFrame || looping;
    }

    /**
     * Lépés a következő képkockára.
     * @return {@code true}, ha történt változtatás (volt újabb kocka).
     */
    public boolean toNextFrame() {
      int newFrame = currentFrame + 1;
      if (newFrame > lastFrame && looping) {
        newFrame = 0;
      }
      return setCurrentFrame(newFrame);
    }

    public BoundedRangeModel getBrm() {
      return brm;
    }

    public SpinnerModel getSpm() {
      return spm;
    }

    private final ChangeSupport changeSupport = new ChangeSupport(this);

    /**
     *
     * @param listener
     */
    public void addChangeListener(ChangeListener listener) {
      changeSupport.addChangeListener(listener);
    }

    /**
     *
     * @param listener
     */
    public void removeChangeListener(ChangeListener listener) {
      changeSupport.addChangeListener(listener);
    }
  }
}
